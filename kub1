  
FROM tomcat:latest

MAINTAINER Serge

COPY ./webapp.war /usr/local/tomcat/webapps




Integrating Kubernetes cluster with Ansible
Login to ansible server and copy public key onto kubernetes cluseter master account

Update hosts file with new group called kubernetes and add kubernetes master in that.

Create ansible playbooks to create deployment and services

Check for pods, deployments and services on kubernetes master

kubectl get pods -o wide 
kubectl get deploy -o wide
kubectl get service -o wide
Access application suing service IP

wget <kubernetes-Master-IP>:31200



Integration Kubernetes with Jenkins
Jenkins CI Job: Deploy_on_Kubernetes-CI
Pre-requisites
Jenkins server
Ansible server
Kubernetes cluster
Steps to create "Deploy_on_Kubernetes_CI" Jenkin job
From Jenkins home page select "New Item"
Enter an item name: Deploy_on_Kubernetes_CI

Copy from: Deploy_on_Docker_Container_using_Ansible_playbooks
Source Code Management:

Repository: https://github.com/yankils/hello-world.git
Branches to build : */master
Poll SCM : - * * * *

Build:

Root POM:pom.xml
Goals and options: clean install package
Post-build Actions

Send build artifacts over SSH
SSH Publishers
SSH Server Name: ansible-server
Transfers > Transfer set
Source files: webapp/target/*.war
Remove prefix: webapp/target
Remote directory: //opt//docker
Exec command:
ansible-playbook -i /opt/docker/hosts /opt/docker/create-simple-devops-image.yml --limit localhost;
Save and run the job.

Jenkins CD Job: Deploy_on_Kubernetes-CD
Steps to create "Deploy_on_Kubernetes_CI" Jenkin job
From Jenkins home page select "New Item"
Enter an item name: Deploy_on_Kubernetes_CI

Freestyle Project
Post-build Actions

Send build artifacts over SSH
SSH Publishers
Exec command:
ansible-playbook -i /opt/docker/hosts /opt/docker/kubernetes-valaxy-deployment.yml;
ansible-playbook -i /opt/docker/hosts /opt/docker/kubernetes-valaxy-service.yml;
Save and run the job.


Setup Kubernetes (K8s) Cluster on AWS
Create Ubuntu EC2 instance

install AWSCLI

 curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
 apt install unzip python
 unzip awscli-bundle.zip
 #sudo apt-get install unzip - if you dont have unzip in your system
 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
Install kubectl on ubuntu instance

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
 chmod +x ./kubectl
 sudo mv ./kubectl /usr/local/bin/kubectl
Install kops on ubuntu instance

 curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
 chmod +x kops-linux-amd64
 sudo mv kops-linux-amd64 /usr/local/bin/kops
Create an IAM user/role with Route53, EC2, IAM and S3 full access

Attach IAM role to ubuntu instance

# Note: If you create IAM user with programmatic access then provide Access keys. Otherwise region information is enough
aws configure
Create a Route53 private hosted zone (you can create Public hosted zone if you have a domain)

Routeh53 --> hosted zones --> created hosted zone  
Domain Name: valaxy.net
Type: Private hosted zone for Amzon VPC
create an S3 bucket

 aws s3 mb s3://demo.k8s.valaxy.net
Expose environment variable:

 export KOPS_STATE_STORE=s3://demo.k8s.valaxy.net
Create sshkeys before creating cluster

 ssh-keygen
Create kubernetes cluster definitions on S3 bucket

kops create cluster --cloud=aws --zones=ap-south-1b --name=demo.k8s.valaxy.net --dns-zone=valaxy.net --dns private 
Create kubernetes cluser

kops update cluster demo.k8s.valaxy.net --yes
Validate your cluster

 kops validate cluster
To list nodes

kubectl get nodes
To delete cluster

 kops delete cluster demo.k8s.valaxy.net --yes
Deploying Nginx pods on Kubernetes
Deploying Nginx Container

kubectl run sample-nginx --image=nginx --replicas=2 --port=80
# kubectl run simple-devops-project --image=yankils/simple-devops-image --replicas=2 --port=8080
kubectl get pods
kubectl get deployments
Expose the deployment as service. This will create an ELB in front of those 2 containers and allow us to publicly access them.

kubectl expose deployment sample-nginx --port=80 --type=LoadBalancer
# kubectl expose deployment simple-devops-project --port=8080 --type=LoadBalancer
kubectl get services -o wide
© 2021 GitHub, Inc.



---
- hosts: ansible-server
  become: true

  tasks:
  - name: create docker image using war file
    command: docker build -t simple-devops-image:latest .
    args:
      chdir: /opt/k8s-lab

  - name: create tag to image
    command: docker tag simple-devops-image yankils/simple-devops-image

  - name: push image on to dockerhub
    command: docker push yankils/simple-devops-image

  - name: remove docker images form ansible server
    command: docker rmi simple-devops-image:latest yankils/simple-devops-image
    ignore_errors: yes
© 2021 GitHub, Inc.


---
- hosts: ansible-server
  become: true

  tasks:
  - name: create docker image using war file
    command: docker build -t simple-devops-image:latest .
    args:
      chdir: /opt/k8s-lab

  - name: create tag to image
    command: docker tag simple-devops-image yankils/simple-devops-image

  - name: push image on to dockerhub
    command: docker push yankils/simple-devops-image

  - name: remove docker images form ansible server
    command: docker rmi simple-devops-image:latest yankils/simple-devops-image
    ignore_errors: yes
    
    
    
    ---
- name: Create pods using deployment 
  hosts: kubernetes 
  become: true
  user: root
 
  tasks: 
  - name: create a deployment
    command: kubectl apply -f valaxy-deploy.yml
 
  - name: update deployment with new pods if image updated in docker hub
    command: kubectl rollout restart deployment.v1.apps/valaxy-deployment
    
    
    ---
- name: create service for deployment
  hosts: kubernetes
  become: true
  user: root

  tasks:
  - name: create a service
    command: kubectl apply -f valaxy-service.yml


apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: valaxy-deployment
spec:
  selector:
    matchLabels:
      app: valaxy-devops-project
  replicas: 2 # tells deployment to run 2 pods matching the template
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

  template:
    metadata:
      labels:
        app: valaxy-devops-project
    spec:
      containers:
      - name: valaxy-devops-project
        image: yankils/simple-devops-image
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        
        
        apiVersion: v1
kind: Service
metadata:
  name: valaxy-service
  labels:
    app: valaxy-devops-project
spec:
  selector:
    app: valaxy-devops-project
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 31200
